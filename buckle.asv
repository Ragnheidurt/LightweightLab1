function [pb,ub]=buckle(Ks,Ksigmas,nnode,node_z);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Solve beam buckling equation
% File name: buckle.m
% 
% Ks		Structural stiffness matrix
% Ksigmas	Structural inital stiffness matrix
% nnode		Number of nodes
% node_z	Nodal x-coordinates
%
% pb		Matrix with eigenvalues (load factors) in diagonal
% ub		Corresponding matrix of eigenvectors (buckling modes)
% 	(Column i of ub shows the buckling mode for buckling load (i,i) in pb)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Calculate eigenvalues and eigenvectors
[ub,pb] = eig(Ks,-Ksigmas);


% Split bending and twist modes into separate vectors
bendingvectors =[];
bendingeigen = [];
twistingvectors = [];
twistingeigien = [];
[i,k] = size(ub);
countBend = 1;
countTwist = 1;
for i=1:3*nnode-3
    if ub(1,i) ~= 0 || ub(2,i) ~= 0
         bendingvectors(:,countBend) = ub(:,i);
         bendingeigen(:,countBend) = pb(:,i);
         countBend = countBend +1;
    end    
    if ub(3,i) ~= 0
         twistingvectors(:,countTwist) = ub(:,i);
         twistingeigen(:,countTwist) = pb(:,i);
         countTwist = countTwist +1;
    end 
end

if size(bendingvectors) == [i, 2/3*i] & size(twistingvectors) == [i, 1/3*i]
else
    disp('Error incountered splitting bending and twisting in vectors')
end

% Normalise deflections, rotations and twist for plotting purposes (without risking to mix up signs or divide by zero)
[i,k] = size(bendingvectors);
for i = 1:k
    bendingnorm2(i) = bendingvectors./max(abs(bendingvectors));
end
bendingnorm = bendingvectors./max(abs(bendingvectors));
twistingnorm = twistingvectors./max(abs(twistingvectors));

% Plot buckling modes
figure
plot(node_z,[0;bendingnorm(1:3:i,1)]);
hold on
plot(node_z,[0;bendingnorm(1:3:i,2)]);


% Present the buckling loads
[r,k]=size(bendingeigen);
buckloads = [];
for i=1:k
    buckloads(i,1) = sum(bendingeigen(:,i));    
end
buckloads

figure
semilogy([1:i],buckloads,'x:')
hold on







